name: Docker Deploy
run-name: ${{ github.actor }} is running Docker Deploy at ${{ github.event.head_commit.timestamp }}
on: push

jobs:
    docker-verify:
        name: Docker verify job
        runs-on: ubuntu-latest
        steps:
          - name: Checkout repository
            uses: actions/checkout@v5
          
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
                python-version: '3.11'

          - name: Install test dependencies (pytest, pytest-playwright)
            run: |
                python -m pip install --upgrade pip
                pip install -r backend/requirements.txt

          - name: Install Playwright browsers
            run: |
                playwright install
    
          - name: Build backend image
            run: |
                docker build -f Dockerfile-backend -t my-backend:latest .
                echo "💡 Backend image built."
    
          - name: Build frontend image
            run: |
                docker build -f Dockerfile-frontend -t my-frontend:latest .
                echo "💡 Frontend image built."
    
          - name: Create Docker network
            run: |
                docker network create myapp-network
                echo "💡 Docker network created."

          - name: Run backend
            run: |
                docker run -d --name backend --network myapp-network -p 8000:8000 -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} my-backend:latest
                sleep 5
                status=$(docker inspect -f '{{.State.Status}}' backend)
                if [ "$status" != "running" ]; then
                  echo "❌ Backend container is not running. Printing logs:"
                  docker logs backend
                  exit 1
                else
                  echo "💡 Backend running."
                fi
    
          - name: Run frontend
            run: |
                docker run -d --name frontend --network myapp-network -p 5173:80 my-frontend:latest
                sleep 5
                status=$(docker inspect -f '{{.State.Status}}' frontend)
                if [ "$status" != "running" ]; then
                  echo "❌ Frontend container is not running. Printing logs:"
                  docker logs frontend
                  exit 1
                else
                  echo "💡 Frontendackend running."
                fi
    
          - name: Verify backend
            run: |
                curl --fail http://localhost:8000/ping
                echo "💡 Backend verified."
    
          - name: Verify frontend
            run: | 
                pytest -m e2e
                echo "💡 Frontend verified."