name: Docker Deploy
run-name: ${{ github.actor }} is running Docker Deploy at ${{ github.event.head_commit.timestamp }}
on: push

jobs:
    docker-verify:
        name: Docker verify job
        runs-on: ubuntu-latest

        steps:
          - name: Checkout repository
            uses: actions/checkout@v5
          
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
                python-version: '3.11'

          - name: Install test dependencies (pytest, pytest-playwright)
            run: |
                python -m pip install --upgrade pip
                pip install -r backend/requirements.txt

          - name: Install Playwright browsers
            run: |
                playwright install
    
          - name: Build backend image
            run: |
                docker build -f Dockerfile-backend -t my-backend:latest .
                echo "üí° Backend image built."
    
          - name: Build frontend image
            run: |
                docker build -f Dockerfile-frontend -t my-frontend:latest .
                echo "üí° Frontend image built."
    
          - name: Create Docker network
            run: |
                docker network create myapp-network
                echo "üí° Docker network created."

          - name: Run Postgres
            run: |
              docker run -d --name postgres \
                --network myapp-network \
                -e POSTGRES_USER=postgres \
                -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
                -e POSTGRES_DB=userdb \
                -p 5432:5432 \
                postgres:17
              # wait for postgres to be ready
              echo "‚è≥ Waiting for Postgres..."
              timeout=30
              interval=2
              elapsed=0
              until docker exec postgres pg_isready -U postgres; do
                sleep $interval
                elapsed=$((elapsed + interval))
                if [ $elapsed -ge $timeout ]; then
                  echo "‚ùå Postgres did not become ready after $timeout seconds"
                  docker logs postgres
                  exit 1
                fi
              done
              echo "‚úÖ Postgres is ready."

          - name: Run backend
            run: |
                docker run -d --name backend \
                  --network myapp-network \
                  -p 8000:8000 \
                  -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
                  -e RUNNING_IN_DOCKER=1 \
                  my-backend:latest
                sleep 10
                echo "üîç Backend container status:"
                docker ps -a --filter name=backend
                echo "üîç Backend container logs:"
                docker logs backend
                status=$(docker inspect -f '{{.State.Status}}' backend)
                if [ "$status" != "running" ]; then
                  echo "‚ùå Backend container is not running. Status: $status"
                  exit 1
                else
                  echo "üí° Backend running."
                fi
    
          - name: Run frontend
            run: |
                docker run -d --name frontend --network myapp-network -p 5173:80 my-frontend:latest
                sleep 5
                status=$(docker inspect -f '{{.State.Status}}' frontend)
                if [ "$status" != "running" ]; then
                  echo "‚ùå Frontend container is not running. Printing logs:"
                  docker logs frontend
                  exit 1
                else
                  echo "üí° Frontend running."
                fi
    
          - name: Verify backend
            run: |
                curl --fail http://localhost:8000/ping
                echo "üí° Backend verified."
    
          - name: Verify frontend
            env:
              POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
            run: | 
                pytest -m e2e
                echo "üí° Frontend verified."